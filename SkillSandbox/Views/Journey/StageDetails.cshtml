@model SkillSandbox.Models.JourneyStage
@{
    ViewData["Title"] = "Stage Details";
}

<div class="container mt-4">
    <div class="row">
        <div class="col-md-12">
            <div class="card shadow">
                <div class="card-header bg-primary text-white d-flex justify-content-between align-items-center">
                    <h3 class="mb-0">@GetStageTitle(Model.StageType)</h3>
                    <span class="badge @GetStatusBadgeColor(Model.Status)">@Model.Status</span>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-8">
                            <h4>Stage Description</h4>
                            <p class="lead">@GetStageDescription(Model.StageType)</p>
                            <hr />

                            <h4>Progress Details</h4>
                            <dl class="row">
                                <dt class="col-sm-4">Status</dt>
                                <dd class="col-sm-8">@Model.Status</dd>

                                @if (Model.StartedAt.HasValue)
                                {
                                    <dt class="col-sm-4">Started On</dt>
                                    <dd class="col-sm-8">@Model.StartedAt.Value.ToString("MMMM dd, yyyy")</dd>
                                }

                                @if (Model.CompletedAt.HasValue)
                                {
                                    <dt class="col-sm-4">Completed On</dt>
                                    <dd class="col-sm-8">@Model.CompletedAt.Value.ToString("MMMM dd, yyyy")</dd>
                                }
                            </dl>

                            @if (!string.IsNullOrEmpty(Model.Notes))
                            {
                                <h4>Notes</h4>
                                <div class="alert alert-info">
                                    @Model.Notes
                                </div>
                            }

                            @if (!string.IsNullOrEmpty(Model.Feedback))
                            {
                                <h4>Feedback</h4>
                                <div class="alert alert-success">
                                    @Model.Feedback
                                </div>
                            }

                            @if (Model.Requirements?.Any() == true)
                            {
                                <h4>Requirements</h4>
                                <div class="list-group">
                                    @foreach (var requirement in Model.Requirements)
                                    {
                                        <div class="list-group-item d-flex justify-content-between align-items-center">
                                            <div>
                                                <input type="checkbox" 
                                                       class="form-check-input me-2" 
                                                       @(requirement.IsCompleted ? "checked" : "") 
                                                       onchange="updateRequirementStatus(@requirement.Id, this.checked)">
                                                @requirement.Requirement
                                                @if (requirement.IsCompleted && requirement.CompletedDate.HasValue)
                                                {
                                                    <small class="text-muted ms-2">
                                                        Completed: @requirement.CompletedDate.Value.ToString("MMM dd, yyyy")
                                                    </small>
                                                }
                                            </div>
                                        </div>
                                    }
                                </div>
                            }

                            @if (Model.StageType == JourneyStageType.Placement)
                            {
                                <h4>Job Applications</h4>
                                <div class="table-responsive">
                                    <table class="table table-hover">
                                        <thead>
                                            <tr>
                                                <th>Date</th>
                                                <th>Activity</th>
                                                <th>Company</th>
                                                <th>Status</th>
                                                <th>Remarks</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            @foreach (var application in Model.JobApplications.OrderByDescending(j => j.Date))
                                            {
                                                <tr>
                                                    <td>@application.Date.ToString("MMM dd, yyyy")</td>
                                                    <td>@application.Activity</td>
                                                    <td>@application.CompanyName</td>
                                                    <td>
                                                        <span class="badge @GetJobApplicationStatusBadgeColor(application.Status)">
                                                            @application.Status
                                                        </span>
                                                    </td>
                                                    <td>@application.Remarks</td>
                                                </tr>
                                            }
                                        </tbody>
                                    </table>
                                </div>

                                <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#addJobApplicationModal">
                                    Add Job Application
                                </button>
                            }

                            @if (Model.StageType == JourneyStageType.Enrollment)
                            {
                                <h4>Payments</h4>
                                <div class="table-responsive">
                                    <table class="table table-hover">
                                        <thead>
                                            <tr>
                                                <th>Amount</th>
                                                <th>Due Date</th>
                                                <th>Status</th>
                                                <th>Paid Date</th>
                                                <th>Notes</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            @foreach (var payment in Model.Payments.OrderBy(p => p.DueDate))
                                            {
                                                <tr>
                                                    <td>@payment.Amount.ToString("C")</td>
                                                    <td>@payment.DueDate.ToString("MMM dd, yyyy")</td>
                                                    <td>
                                                        <span class="badge @GetPaymentStatusBadgeColor(payment.Status)">
                                                            @payment.Status
                                                        </span>
                                                    </td>
                                                    <td>@(payment.PaidDate?.ToString("MMM dd, yyyy") ?? "-")</td>
                                                    <td>@payment.Notes</td>
                                                </tr>
                                            }
                                        </tbody>
                                    </table>
                                </div>

                                <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#addPaymentModal">
                                    Add Payment
                                </button>
                            }
                        </div>
                        <div class="col-md-4">
                            <div class="card">
                                <div class="card-header">
                                    <h5 class="mb-0">Actions</h5>
                                </div>
                                <div class="card-body">
                                    @if (Model.Status == JourneyStageStatus.NotStarted)
                                    {
                                        <form asp-action="UpdateStageStatus" method="post">
                                            <input type="hidden" name="stageId" value="@Model.Id" />
                                            <input type="hidden" name="status" value="@JourneyStageStatus.InProgress" />
                                            <button type="submit" class="btn btn-primary w-100 mb-2">Start Stage</button>
                                        </form>
                                    }
                                    else if (Model.Status == JourneyStageStatus.InProgress)
                                    {
                                        <form asp-action="UpdateStageStatus" method="post">
                                            <input type="hidden" name="stageId" value="@Model.Id" />
                                            <input type="hidden" name="status" value="@JourneyStageStatus.Completed" />
                                            <button type="submit" class="btn btn-success w-100 mb-2">Complete Stage</button>
                                        </form>
                                    }

                                    <form asp-action="UpdateStageStatus" method="post">
                                        <input type="hidden" name="stageId" value="@Model.Id" />
                                        <input type="hidden" name="status" value="@Model.Status" />
                                        <div class="mb-3">
                                            <label for="notes" class="form-label">Add Notes</label>
                                            <textarea name="notes" id="notes" class="form-control" rows="3">@Model.Notes</textarea>
                                        </div>
                                        <button type="submit" class="btn btn-info w-100">Update Notes</button>
                                    </form>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="card-footer">
                    <a asp-action="Index" class="btn btn-secondary">Back to Journey</a>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Add Job Application Modal -->
<div class="modal fade" id="addJobApplicationModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Add Job Application</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <form asp-action="AddJobApplication" method="post">
                <div class="modal-body">
                    <input type="hidden" name="stageId" value="@Model.Id" />
                    <div class="mb-3">
                        <label for="date" class="form-label">Date</label>
                        <input type="date" class="form-control" id="date" name="date" required>
                    </div>
                    <div class="mb-3">
                        <label for="activity" class="form-label">Activity</label>
                        <input type="text" class="form-control" id="activity" name="activity" required>
                    </div>
                    <div class="mb-3">
                        <label for="companyName" class="form-label">Company Name</label>
                        <input type="text" class="form-control" id="companyName" name="companyName" required>
                    </div>
                    <div class="mb-3">
                        <label for="status" class="form-label">Status</label>
                        <select class="form-select" id="status" name="status" required>
                            @foreach (JobApplicationStatus status in Enum.GetValues(typeof(JobApplicationStatus)))
                            {
                                <option value="@status">@status</option>
                            }
                        </select>
                    </div>
                    <div class="mb-3">
                        <label for="remarks" class="form-label">Remarks</label>
                        <textarea class="form-control" id="remarks" name="remarks" rows="3"></textarea>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-primary">Add Application</button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Add Payment Modal -->
<div class="modal fade" id="addPaymentModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Add Payment</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <form asp-action="AddPayment" method="post">
                <div class="modal-body">
                    <input type="hidden" name="stageId" value="@Model.Id" />
                    <div class="mb-3">
                        <label for="amount" class="form-label">Amount</label>
                        <input type="number" class="form-control" id="amount" name="amount" step="0.01" required>
                    </div>
                    <div class="mb-3">
                        <label for="dueDate" class="form-label">Due Date</label>
                        <input type="date" class="form-control" id="dueDate" name="dueDate" required>
                    </div>
                    <div class="mb-3">
                        <label for="notes" class="form-label">Notes</label>
                        <textarea class="form-control" id="notes" name="notes" rows="3"></textarea>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-primary">Add Payment</button>
                </div>
            </form>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        function updateRequirementStatus(requirementId, isCompleted) {
            fetch(`/Journey/UpdateRequirementStatus?requirementId=${requirementId}&isCompleted=${isCompleted}`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                }
            });
        }
    </script>
}

@functions {
    private string GetStatusBadgeColor(JourneyStageStatus status)
    {
        return status switch
        {
            JourneyStageStatus.NotStarted => "bg-secondary",
            JourneyStageStatus.InProgress => "bg-warning",
            JourneyStageStatus.Completed => "bg-success",
            JourneyStageStatus.Failed => "bg-danger",
            _ => "bg-secondary"
        };
    }

    private string GetJobApplicationStatusBadgeColor(JobApplicationStatus status)
    {
        return status switch
        {
            JobApplicationStatus.Submitted => "bg-info",
            JobApplicationStatus.UnderReview => "bg-warning",
            JobApplicationStatus.InterviewScheduled => "bg-primary",
            JobApplicationStatus.InterviewCompleted => "bg-secondary",
            JobApplicationStatus.Offered => "bg-success",
            JobApplicationStatus.Rejected => "bg-danger",
            JobApplicationStatus.Withdrawn => "bg-secondary",
            _ => "bg-secondary"
        };
    }

    private string GetPaymentStatusBadgeColor(PaymentStatus status)
    {
        return status switch
        {
            PaymentStatus.Pending => "bg-warning",
            PaymentStatus.Partial => "bg-info",
            PaymentStatus.Completed => "bg-success",
            PaymentStatus.Overdue => "bg-danger",
            _ => "bg-secondary"
        };
    }

    private string GetStageTitle(JourneyStageType stageType)
    {
        return stageType switch
        {
            JourneyStageType.JourneyStart => "Your SkillSandbox Journey Starts Here",
            JourneyStageType.WorkReadinessAssessment => "Work-Readiness Assessment",
            JourneyStageType.Consultation => "Consultation with SkillSandbox",
            JourneyStageType.Interviews => "Interviews",
            JourneyStageType.Enrollment => "Enrollment",
            JourneyStageType.Training => "Training",
            JourneyStageType.Internship => "Internship",
            JourneyStageType.Placement => "Placement",
            _ => stageType.ToString()
        };
    }

    private string GetStageDescription(JourneyStageType stageType)
    {
        return stageType switch
        {
            JourneyStageType.JourneyStart => "Begin your journey with SkillSandbox. This is where your transformation starts.",
            JourneyStageType.WorkReadinessAssessment => "Complete a comprehensive assessment to understand your current skill level and areas for improvement.",
            JourneyStageType.Consultation => "Meet with our experts for personalized advice and guidance on your career path.",
            JourneyStageType.Interviews => "Participate in interviews to ensure you're ready and a good fit for our program.",
            JourneyStageType.Enrollment => "Complete the official registration process to join our program.",
            JourneyStageType.Training => "Engage in skill-building workshops, gain hands-on workplace experience, and receive mentorship.",
            JourneyStageType.Internship => "Get deployed to partner companies for real-world experience.",
            JourneyStageType.Placement => "Transition into full-time employment with our partner companies.",
            _ => "Description not available"
        };
    }
} 